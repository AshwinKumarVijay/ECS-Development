#version 430 core

in vec4 texture_coordinates;

layout(binding = 0) uniform sampler2D TextureSampler0;

out vec4 color;

const float offset = 1.0 / 300;  

void main()
{
    vec2 offsets[9] = vec2[](
        vec2(-offset, offset),  // top-left
        vec2(0.0f,    offset),  // top-center
        vec2(offset,  offset),  // top-right
        vec2(-offset, 0.0f),    // center-left
        vec2(0.0f,    0.0f),    // center-center
        vec2(offset,  0.0f),    // center-right
        vec2(-offset, -offset), // bottom-left
        vec2(0.0f,    -offset), // bottom-center
        vec2(offset,  -offset)  // bottom-right    
    );

    float kernel[9] = float[](
        1, 2, 1,
        2,  4, 2,
        1, 2, 1
    );
    
    vec3 sampleTex[9];
    for(int i = 0; i < 9; i++)
    {
        sampleTex[i] = vec3(texture2D(TextureSampler0, vec2(texture_coordinates.x, texture_coordinates.y) + offsets[i]));
    }

    vec3 col = vec3(0.0);

	float distance = pow(length(vec2(abs(texture_coordinates.x - 0.5), abs(texture_coordinates.y - 0.5))), 0.1);
	if(distance < 0.85) distance = 0.0;

    for(int i = 0; i < 9; i++)
	{
        col += sampleTex[i] * kernel[i] / 16.0;
    }


	const float gamma = 2.2;
    vec3 hdrColor = distance * col + (1 - distance) * vec3(texture2D(TextureSampler0, vec2(texture_coordinates.x, texture_coordinates.y)));

	// Reinhard tone mapping
    vec3 mapped = hdrColor / (hdrColor + vec3(1.0));
    // Gamma correction 
    mapped = pow(mapped, vec3(1.0 / gamma));
  
    color = vec4(mapped, 1.0);

}