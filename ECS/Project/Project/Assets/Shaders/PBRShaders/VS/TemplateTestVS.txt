#version 430 core


//	CAMERA DATA. UNIFORM CAMERA POSITION, CAMERA PERSPECTIVE MATRIX, CAMERA VIEW MATRIX.
layout (location = 10) uniform vec4 u_WorldCameraPosition;
layout (location = 11) uniform mat4 u_CameraPerspectiveMatrix;
layout (location = 12) uniform mat4 u_CameraViewMatrix;

//	MODEL DATA. UNIFORM MODEL, INVERSE MODEL, NORMAL MATRIX.
layout (location = 20) uniform mat4 u_ModelMatrix;
layout (location = 21) uniform mat3 u_InverseTransposeModelMatrix;
layout (location = 22) uniform mat4 u_ModelViewMatrix;
layout (location = 23) uniform mat3 u_InverseTransposeModelViewMatrix;

//	VERTEX ATTRIBUTES. POSITION, NORMAL, COLOR.
layout (location = 0) in vec4 a_vertexposition;
layout (location = 1) in vec3 a_normal;
layout (location = 2) in vec4 a_vertexcolor;


//	VERTEX ATTRIBUTES OUT.
//	VERTEX POSITION, VERTEX NORMAL, VERTEX TANGENT, VERTEX BITANGENT.
layout (location = 0) out vec4 v_vertexposition;
layout (location = 1) out vec3 v_normal;
layout (location = 2) out vec4 v_vertexcolor;
layout (location = 3) out vec3 v_tangent;
layout (location = 4) out vec3 v_bitangent;

	
//	THE VERTEX SHADER MAIN.
void main(void)
{

	//	Compute the World Space Vertex Position.
	v_vertexposition = u_ModelMatrix * a_vertexposition;

	//	Transfer the Vertex Color.
	v_vertexcolor = a_vertexcolor;

	//	Compute the position.
	gl_Position = u_CameraPerspectiveMatrix * u_CameraViewMatrix * u_ModelMatrix * a_vertexposition;

}