#version 430 core


//	CAMERA DATA. UNIFORM CAMERA POSITION, CAMERA PERSPECTIVE MATRIX, CAMERA VIEW MATRIX.
layout (location = 10) uniform vec4 u_WorldCameraPosition;
layout (location = 11) uniform mat4 u_CameraPerspectiveMatrix;
layout (location = 12) uniform mat4 u_CameraViewMatrix;

//	MODEL DATA. UNIFORM MODEL, INVERSE MODEL, NORMAL MATRIX.
layout (location = 20) uniform mat4 u_ModelMatrix;
layout (location = 21) uniform mat3 u_InverseTransposeModelMatrix;
layout (location = 22) uniform mat4 u_ModelViewMatrix;
layout (location = 23) uniform mat3 u_InverseTransposeModelViewMatrix;

//	VERTEX ATTRIBUTES. POSITION, NORMAL, COLOR.
layout (location = 0) in vec4 a_vertexposition;
layout (location = 1) in vec3 a_normal;
layout (location = 2) in vec4 a_vertexcolor;


//	VERTEX ATTRIBUTES OUT.
//	VERTEX POSITION, VERTEX NORMAL, VERTEX TANGENT, VERTEX BITANGENT.
layout (location = 0) out vec4 v_vertexposition;
layout (location = 1) out vec3 v_normal;
layout (location = 2) out vec4 v_vertexcolor;
layout (location = 3) out vec3 v_tangent;
layout (location = 4) out vec3 v_bitangent;
	


//	Compute Tangent and Bitangent Basis, in world space.
//	@in vec3 normal		: The Normal Vector in World Space.
//	@out vec3 tangent	: The Tangent Vector in World Space.
//	@out vec3 bitangent	: The Bitangent Vector in World Space.
void computeNormalTangentBitangentBasis(in vec3 normal, out vec3 tangent, out vec3 bitangent)
{
	bitangent = vec3(0.0, 1.0, 0.0);
	
	//	Compute the Normal Dot Up Vector.
	float normalDotUpVector = dot(normal, bitangent);

	//	Check the Edge cases.
	if(normalDotUpVector == 1.0)
	{
		//	Set the corresponding edge case bitangent.
		bitangent = vec3(0.0, 0.0, -1.0);
	}
	else if(normalDotUpVector == -1.0)
	{
		//	Set the corresponding edge case bitangent.
		bitangent = vec3(0.0, 0.0, 1.0);	
	}

	//	Compute the Tangent Vector.
	tangent = cross(bitangent, normal);
	
	//	Compute the Bitangent Vector.
	bitangent = cross(normal, tangent);
}

//	THE VERTEX SHADER MAIN.
void main(void)
{
	//	Compute the World Space Normal.
	v_normal = u_InverseTransposeModelMatrix * a_normal;

	//	Compute the Normal, Tangent, Bitangent Basis.
	computeNormalTangentBitangentBasis(v_normal, v_tangent, v_bitangent);

	//	Compute the World Space Vertex Position.
	v_vertexposition = u_ModelMatrix * a_vertexposition;

	//	Compute the position.
	gl_Position = u_CameraPerspectiveMatrix * u_CameraViewMatrix * u_ModelMatrix * a_vertexposition;

}