#version 430 core

//	TEXTURE SAMPLER
layout (location = 0) uniform sampler2D u_Texture;

//	HORIZONTAL BLUR 
layout (location = 1) uniform bool u_HorizontalFlag;

//	WEIGHTS
layout (location = 2) uniform float u_Weights[5] = float[] (0.227027, 0.1945946, 0.1216216, 0.054054, 0.016216);

//	TEXTURE COORDINATES.
layout (location = 0) in vec2 v_TextureCoordinates;

//	COLOR OUTPUT
layout (location = 0) out vec4 o_fragColor;

//	THE FRAGMENT SHADER MAIN.
void main(void)
{
	//	Get the size of a Single Texel.
	vec2 textureOffset = 1.0 / textureSize(u_Texture, 0); 

	//	Current Fragment Contribution.
	vec3 currentFragment = texture(u_Texture, v_TextureCoordinates).xyz * u_Weights[0];

	//	Check which direction we are blurring.
	if(u_HorizontalFlag == true)
	{
		//	Iterate over the texture samples.
		for(int i = 1; i < 5; ++i)
        {
			//	Get the texture sample.
            currentFragment += texture(u_Texture, v_TextureCoordinates + vec2(textureOffset.x * i, 0.0)).rgb * u_Weights[i];

			//	Get the texture sample.
            currentFragment += texture(u_Texture, v_TextureCoordinates - vec2(textureOffset.x * i, 0.0)).rgb * u_Weights[i];
        }
	}
	else
	{
		//	Iterate over the texture samples.
        for(int i = 1; i < 5; ++i)
        {
			//	Get the texture sample.
            currentFragment += texture(u_Texture, v_TextureCoordinates + vec2(0.0, textureOffset.y * i)).rgb * u_Weights[i];

			//	Get the texture sample.
            currentFragment += texture(u_Texture, v_TextureCoordinates - vec2(0.0, textureOffset.y * i)).rgb * u_Weights[i];
        }	
	}

	//	Output the new fragment color.
	o_fragColor = vec4(currentFragment.xyz, 1.0);
}
