#version 430 core

uniform struct Camera
{
	vec3 worldCameraPosition;
	mat4 perspectiveMatrix;
	mat4 viewMatrix;
};

uniform struct Model
{
	mat4 modelMatrix;
	mat3 inverseModelMatrix;
	mat3 normalMatrix;
};


uniform Camera CurrentCamera;
uniform Model CurrentModel;

//	Vertex Properties.
layout (location = 0) in vec3 vertex_position;
layout (location = 1) in vec4 vertex_color;
layout (location = 2) in vec3 vertex_normal;
layout (location = 3) in vec4 vertex_texture_coordinates;

//	Out to Fragment Shader.
out vec4 interpolated_vertex_position;
out vec4 interpolated_vertex_color;
out vec3 interpolated_vertex_normal;
out vec4 interpolated_vertex_texture_coordinates;

void main(void)
{
	interpolated_vertex_position = CurrentCamera.viewMatrix * CurrentModel.modelMatrix * (vec4(vertex_position, 1.0));
	interpolated_vertex_color = vertex_color;
	interpolated_vertex_normal = CurrentModel.normalMatrix * vertex_normal;
	interpolated_vertex_texture_coordinates = vertex_texture_coordinates;
	
	gl_Position = CurrentCamera.perspectiveMatrix * CurrentCamera.viewMatrix * CurrentModel.modelMatrix * vec4(vertex_position, 1.0);
}

