//	Vertex Shader.

#version 430 core

struct Camera
{
	//	The Position of the Camera in the World.
	vec3 worldCameraPosition;

	//	The Perspective Matrix of the Camera.
	mat4 perspectiveMatrix;

	//	The View Matrix of the Camera.
	mat4 viewMatrix;
};
uniform Camera CurrentCamera;

struct Model
{
	//	The Model Matrix.
	mat4 modelMatrix;

	//	The Inverse Model Matrix.
	mat3 inverseModelMatrix;

	//	The Normal Matrix.
	mat3 normalMatrix;
};
uniform Model CurrentModel;

//	The incoming position of the vertex.
layout (location = 0) in vec3 vertex_position;

//	The incoming normal of the vertex.
layout (location = 1) in vec3 vertex_normal;

//	The incoming color of the vertex.
layout (location = 2) in vec4 vertex_color;



//	The Transformed Vertex Position.
layout (location = 0) out vec4 transformed_vertex_position;

//	The Transformed Normal.
layout (location = 1) out vec3 transformed_normal;

//	The Vertex Color Out.
layout (location = 2) out vec4 vertex_color_out;


//	The Main Function of the Vertex Shader.
void main(void)
{

	//	The Transformed Normal of the Vertex.
	transformed_normal = (CurrentModel.normalMatrix * vertex_normal);

	//	The Transformed Position of the Vertex.
	transformed_vertex_position = CurrentCamera.viewMatrix * CurrentModel.modelMatrix * (vec4(vertex_position, 1.0));

	//	The Position of the Vertex.
	gl_Position = CurrentCamera.perspectiveMatrix * CurrentCamera.viewMatrix * CurrentModel.modelMatrix * vec4(vertex_position, 1.0);

	//	The Color of the Vertex.
	vertex_color_out = vertex_color;
}
