#version 430 core


//	CAMERA DATA. UNIFORM CAMERA POSITION, CAMERA PERSPECTIVE MATRIX, CAMERA VIEW MATRIX.
layout (location = 10) uniform vec4 u_worldCameraPosition;
layout (location = 11) uniform mat4 u_cameraPerspectiveMatrix;
layout (location = 12) uniform mat4 u_cameraViewMatrix;
layout (location = 24) uniform mat4 u_screenSpaceViewMatrix;
layout (location = 13) uniform vec4 u_cameraNearFarPlaneDistance;

//	MODEL MATRIX, NORMAL MATRIX. MODEL VIEW MATRIX, MV NORMAL MATRIX, SCREEN SPACE VIEW MATRIX, SCREEN SPACE MV MATRIX.
layout (location = 20) uniform mat4 u_modelMatrix;
layout (location = 21) uniform mat3 u_inverseTransposeModelMatrix;
layout (location = 22) uniform mat4 u_modelViewMatrix;
layout (location = 23) uniform mat3 u_inverseTransposeModelViewMatrix;

//	VERTEX ATTRIBUTES. POSITION, NORMAL, COLOR.
layout (location = 0) in vec4 a_vertexPosition;
layout (location = 1) in vec3 a_vertexNormal;
layout (location = 2) in vec4 a_vertexColor;

//	
//	layout (location = 3) in vec3 a_vertexTangent;
//	layout (location = 4) in vec3 a_vertexBitangent;

//	VERTEX TEXTURE COORDINATES ONE AND TWO.
layout (location = 5) in vec2 a_vertexTextureCoordinatesOne;
layout (location = 6) in vec2 a_vertexTextureCoordinatesTwo;


//	VERTEX ATTRIBUTES OUT.
//	VERTEX POSITION, VERTEX NORMAL, VERTEX TANGENT, VERTEX BITANGENT.
layout (location = 0) out vec4 v_vertexPosition;
layout (location = 1) out vec3 v_vertexNormal;
layout (location = 2) out vec4 v_vertexColor;

//	
layout (location = 3) out vec3 v_vertexTangent;
layout (location = 4) out vec3 v_vertexBitangent;

//	VERTEX TEXTURE COORDINATES ONE AND TWO.
layout (location = 5) out vec2 v_vertexTextureCoordinatesOne;
layout (location = 6) out vec2 v_vertexTextureCoordinatesTwo;


//	THE VERTEX SHADER MAIN.
void main(void)
{
	
	//	
	v_vertexPosition = a_vertexPosition;
	v_vertexNormal = a_vertexNormal;
	v_vertexColor = a_vertexColor;

	//	Compute the position.
	gl_Position = u_cameraPerspectiveMatrix * u_ScreenSpaceViewMatrix * a_vertexPosition;
}